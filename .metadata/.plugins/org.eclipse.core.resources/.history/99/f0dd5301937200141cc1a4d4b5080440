package com.example.graphic;

import org.achartengine.ChartFactory;
import org.achartengine.GraphicalView;
import org.achartengine.model.TimeSeries;
import org.achartengine.model.XYMultipleSeriesDataset;
import org.achartengine.renderer.XYMultipleSeriesRenderer;
import org.achartengine.renderer.XYSeriesRenderer;

import com.example.important.Buffer;
import com.example.important.Constants;
import com.example.interfaces.DecoderSubject;
import com.example.interfaces.VoiceRecObserver;
import com.example.interfaces.VoiceRecSubject;
import com.example.minim.FFT;

import android.content.Context;
import android.graphics.Color;

public class LineGraph implements VoiceRecObserver {

	private GraphicalView view;
	private final static String TAG = "LineGraph";
	private TimeSeries dataset = new TimeSeries("Sound wave");
	private XYMultipleSeriesDataset mDataset = new XYMultipleSeriesDataset();
	private int state;
	private Thread thread_draw;
	private XYSeriesRenderer renderer = new XYSeriesRenderer(); // This will be
																// used to
																// customize
																// line 1
	private XYMultipleSeriesRenderer mRenderer = new XYMultipleSeriesRenderer(); // Holds
																					// a
																					// collection
																					// of
																					// XYSeriesRenderer
																					// and
																					// customizes
																					// the
																					// graph

	// private SoundGenSubject sgs;
	private VoiceRecSubject voice_recognition_subject;
	private DecoderSubject decoder_subject;

	public LineGraph(boolean freq) {
		// Add single dataset to multiple dataset
		mDataset.addSeries(dataset);

		// Customization time for line 1!
		renderer.setColor(Color.WHITE);
		renderer.setYLabel(0);
		// renderer.setPointStyle(PointStyle.);
		// renderer.setFillPoints(true);

		// Enable Zoom
		mRenderer.setZoomButtonsVisible(false);
		mRenderer.setXTitle("Time");
		mRenderer.setXLabels(10);
		mRenderer.setYLabels(10);
		mRenderer.setPanEnabled(false, false);
		mRenderer.setYTitle("Amplitude");
		mRenderer.setShowAxes(true);
		
		mRenderer.setApplyBackgroundColor(true);
		mRenderer.setBackgroundColor(Color.BLACK);
		// Add single renderer to multiple renderer

		mRenderer.addSeriesRenderer(renderer);
//		if (freq)
			mRenderer.setRange(new double[] { 0, 80, -10000, 10000 });

		state = Constants.STOP_STATE;
	}

	public GraphicalView getView(Context context) {
		view = ChartFactory.getLineChartView(context, mDataset, mRenderer);
		return view;
	}

	public void addNewPoints(Point p) {
		dataset.add(p.getX(), p.getY());
	}

	@Override
	public void setSubject(VoiceRecSubject vrs) {
		voice_recognition_subject = vrs;
	}

	private void updateLineGraphByte(short[] data) {
		// MessagesLog.d(TAG, "Wesz³o w update LineGraph");
		int index = 0;
		dataset.clear();

		for (int i = 300; i < 380; i++) {
			dataset.add(index++, data[i]);
		}
		view.repaint();

	}

	private void updateLineGraphFFT(float[] data) {
		// MessagesLog.d(TAG, "Wesz³o w update LineGraph");
		int index = 0;
		dataset.clear();

		// for (int i = 0; i < 2000; i++) {
		// // int b_to_int = data[i];
		// dataset.add(index++, data[i]);
		// }

		// view.repaint();

	}

	private void updateLineGraphFFT2(FFT fft) {
		dataset.clear();
		int index = 0;
		if (Constants.ULTRASOUND == 1) {
			for (int i = fft.specSize() / 2; i < fft.specSize(); i++) {
				dataset.add(index, fft.getBand(i));

				index = i * (Constants.SAMPLING / 2) / fft.specSize();
			}
		} else {
			for (int i = 0; i < fft.specSize() / 2; i++) {

				dataset.add(index, fft.getBand(i));

				index = i * (Constants.SAMPLING / 2) / fft.specSize();
			}
		}
		view.repaint();
	}
	
	public void stop(){
		
		
	}
	
	public void start(boolean fft) {
		if (state == Constants.STOP_STATE) {
			state = Constants.START_STATE;
			if (!fft) {
				if (Constants.DRAW_IN_TIME == true) {
					thread_draw = new Thread() {
						@Override
						public void run() {

							while (state == Constants.START_STATE) {
								Buffer buffer = voice_recognition_subject
										.getBufferForGraphQueue();
								if (buffer != null) {
									updateLineGraphByte(buffer.getBufferShort());
								}
							}
						}
					};
				}
			} else {
				if (Constants.DRAW_FFT) {
					thread_draw = new Thread() {
						@Override
						public void run() {

							while (state == Constants.START_STATE) {
								FFT fft = decoder_subject
										.getBufferFFTForGraphQueueFFT();

								if (fft != null) {
									updateLineGraphFFT2(fft);
								}

								// Buffer buffer = decoder_subject
								// .getBufferFFTForGraphQueue();
								// if (buffer != null) {
								// updateLineGraphFFT(buffer.getBufferFFT());
								// }
							}
						}
					};
				}
			}
			if (thread_draw != null) {
				thread_draw.start();
			}

		}
	}

	public void setDecSubject(DecoderSubject decoder) {
		this.decoder_subject = decoder;
	}

}
